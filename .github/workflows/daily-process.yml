# .github/workflows/daily-process.yml
name: Daily XML Processing

on:
  schedule:
    # Executa diariamente √†s 06:00 UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    # Permite execu√ß√£o manual
    inputs:
      force_process:
        description: 'For√ßar processamento mesmo sem mudan√ßas'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  issues: write

jobs:
  process-xml:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Buscar hist√≥rico completo para compara√ß√µes
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'  # Cache das depend√™ncias pip
        
    - name: Create logs directory
      run: mkdir -p logs data/processed
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Check source changes
      id: check-changes
      run: |
        # Verificar se houve mudan√ßas na fonte EPG nas √∫ltimas 24h
        if [ -f "data/last_source_check.txt" ]; then
          LAST_CHECK=$(cat data/last_source_check.txt)
          echo "last_check=$LAST_CHECK" >> $GITHUB_OUTPUT
        else
          echo "last_check=0" >> $GITHUB_OUTPUT
        fi
        echo "current_time=$(date +%s)" >> $GITHUB_OUTPUT
        
    - name: Run processor
      run: |
        # Adicionar o diret√≥rio src ao PYTHONPATH e executar do diret√≥rio raiz
        export PYTHONPATH="${PYTHONPATH}:${{ github.workspace }}/src"
        cd src
        if [ "${{ inputs.force_process }}" == "true" ]; then
          python run.py --force --log-level DEBUG
        else
          python run.py --log-level INFO
        fi
        
    - name: Generate processing report
      if: always()
      run: |
        echo "# üìä Relat√≥rio de Processamento EPG" > processing_report.md
        echo "" >> processing_report.md
        echo "**Data:** $(date)" >> processing_report.md
        echo "**Commit:** ${{ github.sha }}" >> processing_report.md
        echo "" >> processing_report.md
        
        if [ -f "adjusted_schedule.xml.gz" ]; then
          FILE_SIZE=$(stat -c%s "adjusted_schedule.xml.gz")
          echo "**Arquivo gerado:** adjusted_schedule.xml.gz (${FILE_SIZE} bytes)" >> processing_report.md
        fi
        
        echo "" >> processing_report.md
        echo "## üìã √öltimas linhas do log:" >> processing_report.md
        echo "\`\`\`" >> processing_report.md
        if [ -f "logs/processing_$(date +%Y%m%d)*.log" ]; then
          tail -20 logs/processing_$(date +%Y%m%d)*.log >> processing_report.md
        fi
        echo "\`\`\`" >> processing_report.md
        
    - name: Check for changes
      id: verify-changed-files
      run: |
        git add .
        if [ -n "$(git diff --staged --name-only)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "files=$(git diff --staged --name-only | tr '\n' ' ')" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "files=" >> $GITHUB_OUTPUT
        fi
        
    - name: Commit and push changes
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Commit com informa√ß√µes detalhadas
        git commit -m "ü§ñ Processamento EPG autom√°tico - $(date +'%Y-%m-%d %H:%M:%S')" \
                   -m "Arquivos alterados: ${{ steps.verify-changed-files.outputs.files }}" \
                   -m "Workflow: ${{ github.workflow }}" \
                   -m "Run ID: ${{ github.run_id }}"
        
        git push
        
    - name: Update processing timestamp
      if: always()
      run: |
        echo "$(date +%s)" > data/last_processing.txt
        
    - name: Upload processing artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: processing-logs-${{ github.run_id }}
        path: |
          logs/
          processing_report.md
          data/processed/
        retention-days: 30
        compression-level: 6
        
    - name: Upload processed XML
      if: success() && hashFiles('adjusted_schedule.xml.gz') != ''
      uses: actions/upload-artifact@v4
      with:
        name: processed-xml-${{ github.run_id }}
        path: adjusted_schedule.xml.gz
        retention-days: 7
        
    - name: Create issue on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const title = `‚ùå Falha no processamento EPG - ${new Date().toISOString().split('T')[0]}`;
          const body = `
          ## üö® Erro no Processamento EPG
          
          **Workflow:** ${{ github.workflow }}
          **Run ID:** ${{ github.run_id }}
          **Commit:** ${{ github.sha }}
          **Data:** ${new Date().toISOString()}
          
          ### üîç Detalhes
          - Executado em: ${{ runner.os }}
          - Trigger: ${{ github.event_name }}
          - Branch: ${{ github.ref }}
          
          ### üìä Logs
          Verifique os artifacts desta execu√ß√£o para mais detalhes.
          
          ### üõ†Ô∏è Pr√≥ximos passos
          1. Verificar os logs nos artifacts
          2. Validar a fonte EPG
          3. Verificar configura√ß√µes de canais
          4. Re-executar manualmente se necess√°rio
          
          ---
          *Issue criada automaticamente pelo GitHub Actions*
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['bug', 'automated', 'processing-error']
          });
          
    - name: Summary
      if: always()
      run: |
        echo "## üìä Resumo do Processamento" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Item | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| Processamento | ${{ job.status }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Arquivos alterados | ${{ steps.verify-changed-files.outputs.changed }} |" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "adjusted_schedule.xml.gz" ]; then
          FILE_SIZE=$(stat -c%s "adjusted_schedule.xml.gz")
          echo "| Arquivo XML | ${FILE_SIZE} bytes |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîó Links √∫teis" >> $GITHUB_STEP_SUMMARY
        echo "- [Artifacts desta execu√ß√£o](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Hist√≥rico de execu√ß√µes](https://github.com/${{ github.repository }}/actions/workflows/daily-process.yml)" >> $GITHUB_STEP_SUMMARY

---
name: Cleanup Old Artifacts

on:
  schedule:
    - cron: '0 2 * * 0'  # Domingo √†s 02:00 UTC
  workflow_dispatch:

permissions:
  actions: write

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
    - name: Delete old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          const cutoffDate = new Date();
          cutoffDate.setDate(cutoffDate.getDate() - 30); // 30 dias atr√°s
          
          for (const artifact of artifacts.data.artifacts) {
            if (new Date(artifact.created_at) < cutoffDate) {
              console.log(`Deletando artifact: ${artifact.name} (${artifact.created_at})`);
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
            }
          }
